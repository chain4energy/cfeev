// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cfeev/cfeev/energy_transfer_offer.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChargerStatus int32

const (
	ChargerStatus_ACTIVE   ChargerStatus = 0
	ChargerStatus_BUSY     ChargerStatus = 1
	ChargerStatus_INACTIVE ChargerStatus = 2
)

var ChargerStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "BUSY",
	2: "INACTIVE",
}

var ChargerStatus_value = map[string]int32{
	"ACTIVE":   0,
	"BUSY":     1,
	"INACTIVE": 2,
}

func (x ChargerStatus) String() string {
	return proto.EnumName(ChargerStatus_name, int32(x))
}

func (ChargerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_375e3f0d6d61ad8e, []int{0}
}

type EnergyTransferOffer struct {
	Id            uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner         string        `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ChargerId     string        `protobuf:"bytes,3,opt,name=chargerId,proto3" json:"chargerId,omitempty"`
	ChargerStatus ChargerStatus `protobuf:"varint,4,opt,name=chargerStatus,proto3,enum=cfeev.cfeev.ChargerStatus" json:"chargerStatus,omitempty"`
	Location      *Location     `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	Tariff        float32       `protobuf:"fixed32,6,opt,name=tariff,proto3" json:"tariff,omitempty"`
}

func (m *EnergyTransferOffer) Reset()         { *m = EnergyTransferOffer{} }
func (m *EnergyTransferOffer) String() string { return proto.CompactTextString(m) }
func (*EnergyTransferOffer) ProtoMessage()    {}
func (*EnergyTransferOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_375e3f0d6d61ad8e, []int{0}
}
func (m *EnergyTransferOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EnergyTransferOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EnergyTransferOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EnergyTransferOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnergyTransferOffer.Merge(m, src)
}
func (m *EnergyTransferOffer) XXX_Size() int {
	return m.Size()
}
func (m *EnergyTransferOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_EnergyTransferOffer.DiscardUnknown(m)
}

var xxx_messageInfo_EnergyTransferOffer proto.InternalMessageInfo

func (m *EnergyTransferOffer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EnergyTransferOffer) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *EnergyTransferOffer) GetChargerId() string {
	if m != nil {
		return m.ChargerId
	}
	return ""
}

func (m *EnergyTransferOffer) GetChargerStatus() ChargerStatus {
	if m != nil {
		return m.ChargerStatus
	}
	return ChargerStatus_ACTIVE
}

func (m *EnergyTransferOffer) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *EnergyTransferOffer) GetTariff() float32 {
	if m != nil {
		return m.Tariff
	}
	return 0
}

func init() {
	proto.RegisterEnum("cfeev.cfeev.ChargerStatus", ChargerStatus_name, ChargerStatus_value)
	proto.RegisterType((*EnergyTransferOffer)(nil), "cfeev.cfeev.EnergyTransferOffer")
}

func init() {
	proto.RegisterFile("cfeev/cfeev/energy_transfer_offer.proto", fileDescriptor_375e3f0d6d61ad8e)
}

var fileDescriptor_375e3f0d6d61ad8e = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4f, 0x4e, 0x4b, 0x4d,
	0x2d, 0xd3, 0x87, 0x90, 0xa9, 0x79, 0xa9, 0x45, 0xe9, 0x95, 0xf1, 0x25, 0x45, 0x89, 0x79, 0xc5,
	0x69, 0xa9, 0x45, 0xf1, 0xf9, 0x69, 0x69, 0xa9, 0x45, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42,
	0xdc, 0x60, 0x25, 0x7a, 0x60, 0x52, 0x4a, 0x0a, 0x59, 0x57, 0x4e, 0x7e, 0x72, 0x62, 0x49, 0x66,
	0x7e, 0x1e, 0x44, 0xa1, 0xd2, 0x33, 0x46, 0x2e, 0x61, 0x57, 0xb0, 0x41, 0x21, 0x50, 0x73, 0xfc,
	0x41, 0xc6, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x04, 0x31,
	0x65, 0xa6, 0x08, 0x89, 0x70, 0xb1, 0xe6, 0x97, 0xe7, 0xa5, 0x16, 0x49, 0x30, 0x29, 0x30, 0x6a,
	0x70, 0x06, 0x41, 0x38, 0x42, 0x32, 0x5c, 0x9c, 0xc9, 0x19, 0x89, 0x45, 0xe9, 0xa9, 0x45, 0x9e,
	0x29, 0x12, 0xcc, 0x60, 0x19, 0x84, 0x80, 0x90, 0x03, 0x17, 0x2f, 0x94, 0x13, 0x5c, 0x92, 0x58,
	0x52, 0x5a, 0x2c, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x67, 0x24, 0xa5, 0x87, 0xe4, 0x38, 0x3d, 0x67,
	0x64, 0x15, 0x41, 0xa8, 0x1a, 0x84, 0x0c, 0xb9, 0x38, 0x60, 0xee, 0x95, 0x60, 0x55, 0x60, 0xd4,
	0xe0, 0x36, 0x12, 0x45, 0xd1, 0xec, 0x03, 0x95, 0x0c, 0x82, 0x2b, 0x13, 0x12, 0xe3, 0x62, 0x2b,
	0x49, 0x2c, 0xca, 0x4c, 0x4b, 0x93, 0x60, 0x53, 0x60, 0xd4, 0x60, 0x0a, 0x82, 0xf2, 0xb4, 0x8c,
	0xb9, 0x78, 0x51, 0xac, 0x12, 0xe2, 0xe2, 0x62, 0x73, 0x74, 0x0e, 0xf1, 0x0c, 0x73, 0x15, 0x60,
	0x10, 0xe2, 0xe0, 0x62, 0x71, 0x0a, 0x0d, 0x8e, 0x14, 0x60, 0x14, 0xe2, 0xe1, 0xe2, 0xf0, 0xf4,
	0x83, 0x8a, 0x33, 0x39, 0xe9, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47,
	0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94,
	0x30, 0x24, 0x34, 0x2b, 0xa0, 0xa1, 0x5a, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x53,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x11, 0x86, 0x95, 0xa7, 0x01, 0x00, 0x00,
}

func (m *EnergyTransferOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EnergyTransferOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EnergyTransferOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tariff != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Tariff))))
		i--
		dAtA[i] = 0x35
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEnergyTransferOffer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ChargerStatus != 0 {
		i = encodeVarintEnergyTransferOffer(dAtA, i, uint64(m.ChargerStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ChargerId) > 0 {
		i -= len(m.ChargerId)
		copy(dAtA[i:], m.ChargerId)
		i = encodeVarintEnergyTransferOffer(dAtA, i, uint64(len(m.ChargerId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEnergyTransferOffer(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEnergyTransferOffer(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEnergyTransferOffer(dAtA []byte, offset int, v uint64) int {
	offset -= sovEnergyTransferOffer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EnergyTransferOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEnergyTransferOffer(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEnergyTransferOffer(uint64(l))
	}
	l = len(m.ChargerId)
	if l > 0 {
		n += 1 + l + sovEnergyTransferOffer(uint64(l))
	}
	if m.ChargerStatus != 0 {
		n += 1 + sovEnergyTransferOffer(uint64(m.ChargerStatus))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovEnergyTransferOffer(uint64(l))
	}
	if m.Tariff != 0 {
		n += 5
	}
	return n
}

func sovEnergyTransferOffer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEnergyTransferOffer(x uint64) (n int) {
	return sovEnergyTransferOffer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EnergyTransferOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnergyTransferOffer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EnergyTransferOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EnergyTransferOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyTransferOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyTransferOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyTransferOffer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyTransferOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyTransferOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnergyTransferOffer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyTransferOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChargerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChargerStatus", wireType)
			}
			m.ChargerStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyTransferOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChargerStatus |= ChargerStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnergyTransferOffer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEnergyTransferOffer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEnergyTransferOffer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tariff", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Tariff = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipEnergyTransferOffer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEnergyTransferOffer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnergyTransferOffer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnergyTransferOffer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnergyTransferOffer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnergyTransferOffer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEnergyTransferOffer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEnergyTransferOffer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEnergyTransferOffer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEnergyTransferOffer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnergyTransferOffer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEnergyTransferOffer = fmt.Errorf("proto: unexpected end of group")
)
